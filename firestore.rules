/**
 * @file Firebase Security Rules for Bol√£o Alviverde Application
 * @description This ruleset enforces a strict user-ownership model with admin overrides, ensuring data privacy and integrity.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user and admins.
 * - /matches/{matchId}: Match details, publicly readable, but writeable only by admins.
 * - /users/{userId}/guesses/{guessId}: User guesses, accessible only to the user.
 * - /roles_admin/{userId}: Admin role indicators; existence grants admin privileges.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Admins are granted elevated privileges via the /roles_admin collection.
 * - All write operations are strictly controlled via ownership or admin checks.
 * - Public read access is granted only to match data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user or an admin can read/write their profile.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure match details. Admin-only write; all users can read.
     * @path /matches/{matchId}
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Secure user guesses for each match. Path-based ownership: only the user can manage their own guesses.
     * @path /users/{userId}/guesses/{guessId}
     */
    match /users/{userId}/guesses/{guessId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

     /**
      * @description Indicates admin role. Existence of document grants admin privileges.
      * @path /roles_admin/{userId}
      */
    match /roles_admin/{userId} {
       allow get: if isSignedIn() && isAdmin();
       allow list: if false;
       allow create: if isSignedIn() && isOwner(userId);
       allow update: if false;
       allow delete: if isSignedIn() && isOwner(userId);
     }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}